openapi: 3.1.0
info:
  version: 1.0.0
  title: Lumx API
  description: A cross-border banking API with instant settlements and unmatched liquidity, powered by stablecoins.
servers:
  - url: https://api-staging.int.lumx.io
  - url: https://api-sandbox.lumx.io
  - url: https://api.lumx.io
paths:
  /customers:
    post:
      summary: Create a customer
      description: This endpoint creates a customer. At least one document is required.
      tags:
        - Customers
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CustomerRequest"
      responses:
        "201":
          description: Successfully created the customer.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Customer"
        "400":
          description: Invalid request parameters
        "409":
          description: An error ocurred trying to create a customer
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Another customer with the same document already exists
                  customer:
                    type: object
                    properties:
                      id:
                        type: string
                        format: uuid
                        example: 3d830599-f834-43c9-93f1-3ff6cf84798c
      security:
        - apiKey: []
    get:
      tags:
        - Customers
      summary: Read all customers
      description: This endpoint reads all customers.
      # parameters:
      #   - in: query
      #     name: cursor
      #     schema:
      #       type: string
      #     required: false
      #     description: The cursor for pagination.
      #   - in: query
      #     name: size
      #     schema:
      #       type: integer
      #     required: false
      #     description: The number of customers to return.
      responses:
        "200":
          description: The list of customers was retrieved successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/Customer"
                  # pagination:
                  #   type: object
                  #   properties:
                  #     cursor:
                  #       type: string
                  #     pageSize:
                  #       type: number
      security:
        - apiKey: []
  "/customers/{id}":
    get:
      tags:
        - Customers
      summary: Read a customer
      description: This endpoint reads a customer's details.
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: The ID of the customer.
      responses:
        "200":
          description: Customer details retrieved successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Customer"
        "404":
          description: Customer not found!.
      security:
        - apiKey: []
    patch:
      tags:
        - Customers
      summary: Update a customer
      description: This endpoint updates a customer's details including documents. Each field is optional, so you can update only some of the customer's details. If a document is provided, it will be updated or added to the customer's documents list.
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: The ID of the customer.
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CustomerPatchRequest"
      responses:
        "200":
          description: Customer updated successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Customer"
        "400":
          description: Invalid request parameters.
        "404":
          description: Customer not found!
        "409":
          description: An error ocurred trying to create a customer
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Another customer with the same document already exists
                  customer:
                    type: object
                    properties:
                      id:
                        type: string
                        format: uuid
                        example: 3d830599-f834-43c9-93f1-3ff6cf84798c
      security:
        - apiKey: []
  /exchange-rate:
    get:
      tags:
        - Exchange Rates
      summary: Get an exchange rate
      description: Get a price quote for converting between currencies.
      parameters:
        - name: sourceCurrency
          in: query
          required: true
          schema:
            type: string
            enum: [BRL, USDC, USDT]
          description: The currency to convert from.
        - name: targetCurrency
          in: query
          required: true
          schema:
            type: string
            enum: [BRL, USDC, USDT]
          description: The currency to convert to.
      responses:
        "200":
          description: Exchange rate quote returned successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExchangeRateResponse"
      security:
        - apiKey: []
  /transactions/on-ramp:
    post:
      tags:
        - Transactions
      summary: On-ramp
      description: >-
        Convert BRL (Brazilian Real) to USDC or USDT.
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: "#/components/schemas/CustomerId"
                - $ref: "#/components/schemas/CrossRampRequest"
                - $ref: "#/components/schemas/OnRampRequest"
      responses:
        "201":
          description: On-ramp operation created successfully.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/BaseTransactionResponse"
                  - $ref: '#/components/schemas/OnRampResponse'
                  - $ref: "#/components/schemas/TransactionTimestamps"
      security:
        - apiKey: []
  /transactions/off-ramp:
    post:
      tags:
        - Transactions
      summary: Off-ramp
      description: >-
        Convert USDC or USDT to BRL (Brazilian Real).
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: "#/components/schemas/CrossRampRequest"
                - $ref: "#/components/schemas/OffRampRequest"
      responses:
        "201":
          description: Off-ramp operation created successfully.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/BaseTransactionResponse"
                  - $ref: "#/components/schemas/OffRampResponse"
                  - $ref: "#/components/schemas/TransactionTimestamps"
  /transactions/transfer:
    post:
      tags:
        - Transactions
      summary: Transfer
      description: >-
        Transfer stablecoins between customers or to an external crypto wallet.
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TransferRequest"
      responses:
        "201":
          description: Transfer transaction created successfully.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/BaseTransactionResponse"
                  - $ref: "#/components/schemas/TransferResponse"
                  - $ref: "#/components/schemas/TransactionTimestamps"
      security:
        - apiKey: []
  "/transactions/{transactionId}/execute":
    post:
      tags:
        - Transactions
      summary: Execute a transaction
      description: "Execute a transaction that you previously signed using your signing provider. Important: This is an ASYNC route! Use the read transaction route to check the transaction's status."
      parameters:
        - name: transactionId
          in: path
          description: The ID of the transaction.
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ExecuteTransactionRequest"
              required:
                - signedTransaction
      responses:
        "202":
          description: The transaction was validated and will be submitted to the blockchain.
          content:
            application/json:
              schema:
                oneOf:
                  - type: object
                    title: Off-ramp
                    allOf:
                      - $ref: "#/components/schemas/BaseTransactionResponse"
                      - $ref: "#/components/schemas/OffRampResponse"
                      - $ref: "#/components/schemas/TransactionTimestamps"
                      - type: object 
                        properties:
                          status: 
                            enum: ['processing']
                  - type: object
                    title: Transfer
                    allOf:
                      - $ref: "#/components/schemas/BaseTransactionResponse"
                      - $ref: "#/components/schemas/TransferResponse"
                      - $ref: "#/components/schemas/TransactionTimestamps"
                      - type: object 
                        properties:
                          status: 
                            enum: ['processing']
      security:
        - apiKey: []
  /transactions:
    get:
      tags:
        - Transactions
      summary: Read all transactions
      description: This endpoint reads all transactions made with your API key.
      # parameters:
      #   - in: query
      #     name: cursor
      #     schema:
      #       type: string
      #     required: false
      #     description: The cursor for pagination.
      #   - in: query
      #     name: size
      #     schema:
      #       type: integer
      #     required: false
      #     description: The number of transactions to return.
      #   - in: query
      #     name: startDate
      #     schema:
      #       type: string
      #       format: date-time
      #     required: false
      #     description: The start date and time for filtering the results.
      #   - in: query
      #     name: endDate
      #     schema:
      #       type: string
      #       format: date-time
      #     required: false
      #     description: The end date and time for filtering the results.
      #   - in: query
      #     name: type
      #     schema:
      #       type: string
      #       enum:
      #         - mint
      #         - transfer
      #         - custom
      #     required: false
      #     description: The type of the transaction.
      #   - in: query
      #     name: status
      #     schema:
      #       type: string
      #       enum:
      #         - success
      #         - failed
      #         - created
      #     required: false
      #     description: The status of the transaction.
      #   - in: query
      #     name: contractId
      #     schema:
      #       type: string
      #     description: The id of the contract.
      responses:
        "200":
          description: The list of transactions was retrieved successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    description: An array containing all transactions made by wallets of this project.
                    items:
                      oneOf:
                        - type: object
                          title: On-ramps
                          allOf:
                            - $ref: "#/components/schemas/BaseTransactionResponse"
                            - $ref: "#/components/schemas/OnRampResponse"
                            - $ref: "#/components/schemas/TransactionTimestamps"
                        - type: object
                          title: Off-ramps
                          allOf:
                            - $ref: "#/components/schemas/BaseTransactionResponse"
                            - $ref: "#/components/schemas/OffRampResponse"
                            - $ref: "#/components/schemas/TransactionTimestamps"
                        - type: object
                          title: Transfers
                          allOf:
                            - $ref: "#/components/schemas/BaseTransactionResponse"
                            - $ref: "#/components/schemas/TransferResponse"
                            - $ref: "#/components/schemas/TransactionTimestamps"
                  # pagination:
                  #   type: object
                  #   properties:
                  #     cursor:
                  #       type: string
                  #       description: The cursor for the next page.
                  #     pageSize:
                  #       type: number
                  #       description: The size of the page.
      security:
        - apiKey: []
  "/transactions/{transactionId}":
    get:
      tags:
        - Transactions
      summary: Read a transaction
      description: This endpoint reads a transaction made with your API key.
      parameters:
        - name: transactionId
          in: path
          description: The ID of the transaction.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: The details of the transaction were retrieved successfully.
          content:
            application/json:
              schema:
                oneOf:
                  - type: object
                    title: On-ramp
                    allOf:
                      - $ref: "#/components/schemas/BaseTransactionResponse"
                      - $ref: "#/components/schemas/OnRampResponse"
                      - $ref: "#/components/schemas/TransactionTimestamps"
                  - type: object
                    title: Off-ramp
                    allOf:
                      - $ref: "#/components/schemas/BaseTransactionResponse"
                      - $ref: "#/components/schemas/OffRampResponse"
                      - $ref: "#/components/schemas/TransactionTimestamps"
                  - type: object
                    title: Transfer
                    allOf:
                      - $ref: "#/components/schemas/BaseTransactionResponse"
                      - $ref: "#/components/schemas/TransferResponse"
                      - $ref: "#/components/schemas/TransactionTimestamps"
      security:
        - apiKey: []

components:
  schemas:
    CustomerRequest:
      type: object
      required:
        - kind
        - registrationName
        - registrationDate
        - address
        - documents
      additionalProperties: false
      properties:
        kind:
          type: string
          description: Customer kind
          enum: ["individual", "business"]
        registrationName:
          type: string
          description: Customer full name if individual, company legal name if business
        registrationDate:
          type: string
          description: Customer date of birth (yyyy-mm-dd) if individual, company incorporation date (yyyy-mm-dd) if business
          format: date
          example: "1970-01-01"
        passkeyPublicKey:
          type: string
          description: Customer's passkey public key. Only applicable if your project is using self-custody.
        address:
          type: object
          description: Customer's address, CustomerIndividualAddress if individual, CustomerBusinessAddress if business
          oneOf:
            - $ref: "#/components/schemas/CustomerIndividualAddress"
            - $ref: "#/components/schemas/CustomerBusinessAddress"
        documents:
          type: array
          description: List of customer documents
          minItems: 1
          items:
            $ref: "#/components/schemas/CustomerDocument"
          example:
            - country: BRA
              type: TAX_ID
              value: 123.456.789-00
    CustomerPatchRequest:
      type: object
      additionalProperties: false
      properties:
        registrationName:
          type: string
          description: Customer full name if individual, company legal name if business
        registrationDate:
          type: string
          description: Customer date of birth (yyyy-mm-dd) if individual, company incorporation date (yyyy-mm-dd) if business
          format: date
          example: "1970-01-01"
        passkeyPublicKey:
          type: string
          description: Customer's passkey public key. Only applicable if your project is using self-custody.
        address:
          type: object
          description: Customer's address, CustomerIndividualAddress if individual, CustomerBusinessAddress if business
          oneOf:
            - $ref: "#/components/schemas/CustomerIndividualAddress"
            - $ref: "#/components/schemas/CustomerBusinessAddress"
        documents:
          type: array
          description: List of customer documents
          minItems: 1
          items:
            $ref: "#/components/schemas/CustomerDocument"
          example:
            - country: BRA
              type: TAX_ID
              value: 123.456.789-00
    Customer:
      type: object
      properties:
        id:
          type: string
          description: Unique customer identifier
          format: uuid
        registrationName:
          type: string
          description: Customer full name if individual, company legal name if business
        registrationDate:
          type: string
          description: Customer date of birth (yyyy-mm-dd) if individual, company incorporation date (yyyy-mm-dd) if business
          format: date
        passkeyPublicKey:
          type: string
          description: Customer's passkey public key
        address:
          type: object
          description: Customer's address, CustomerIndividualAddress if individual, CustomerBusinessAddress if business
          oneOf:
            - $ref: "#/components/schemas/CustomerIndividualAddress"
            - $ref: "#/components/schemas/CustomerBusinessAddress"
        documents:
          type: array
          description: List of customer documents
          items:
            $ref: "#/components/schemas/CustomerDocument"
          example:
            - country: BRA
              type: TAX_ID
              value: 123.456.789-00
        createdAt:
          type: string
          description: Record creation timestamp
          format: date-time
        updatedAt:
          type: string
          description: Record last update timestamp
          format: date-time
    CustomerIndividualAddress:
      type: object
      required:
        - streetLine1
        - city
        - state
        - country
        - zipCode
      additionalProperties: false
      properties:
        streetLine1:
          type: string
          description: Street and number of the residence of the individual
        streetLine2:
          type: string
          description: Complement of the address of the residence of the individual
        city:
          type: string
          description: City of the residence of the individual
        state:
          type: string
          description: State of the residence of the individual
        country:
          type: string
          description: The country code of the residence of the individual, following ISO 3166-1 alpha-2 (BRA is the only one accepted at the moment)
          enum: [BRA]
        zipCode:
          type: string
          description: Zip code of the residence of the individual
    CustomerBusinessAddress:
      type: object
      required:
        - country
      additionalProperties: false
      properties:
        country:
          type: string
          description: The country code where the company is located, following ISO 3166-1 alpha-2 (BRA is the only one accepted at the moment)
          enum: [BRA]
    CustomerDocument:
      type: object
      required:
        - country
        - type
        - value
      additionalProperties: false
      properties:
        country:
          type: string
          description: The country code that issued the document following ISO 3166-1 alpha-2 (BRA is the only one accepted at the moment)
          enum: [BRA]
        type:
          type: string
          description: The type of document (TAX_ID is the only one accepted at the moment)
          enum: [TAX_ID]
        value:
          type: string
          description: The document value/number.
          example: 123.456.789-00
    ExchangeRateResponse:
      type: object
      properties:
        sourceCurrency:
          type: string
          enum: [BRL, USDC, USDT]
          description: The currency to convert from.
        targetCurrency:
          type: string
          enum: [USDC, USDT, BRL]
          description: The currency to convert to.
        rate:
          type: number
          format: double
          example: 6.15
          description: The exchange rate between source and target currencies.
    CustomerId:
      type: object
      required:
        - customerId
      properties:
        customerId:
          type: string
          format: uuid
          description: The customer performing the operation.
    CrossRampRequest:
      type: object
      required:
        - customerId
        - payment
        - amount
        - sourceCurrency
        - targetCurrency
      properties:
        payment:
          description: The definition of how and where the funds from the off ramp transaction will be sent. 
          type: object
          required: rail
          properties:
            rail: 
              type: string 
              enum: ['pix']
              description: The payment rail that will be used for this transaction. 
            keyValue:
              type: string
              description: The PIX key identifying the account where to send funds.
            keyType: 
              type: string 
              enum: ['phone','CPF/CNPJ','email','random']
        sourceCurrency:
          type: string
        targetCurrency:
          type: string
        amount:
          type: string
          format: number
    BaseTransactionResponse:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: The id of the transaction.
        customerId:
          type: string
          format: uuid
          description: The customer performing the operation.
        type: 
          type: string
          description: The type of this transaction
          enum: ['on-ramp','off-ramp','transfer','swap']
        state: 
          type: object
          description: The transactions's results. Each transaction type has an specific result object structure.
          allOf:
            - $ref: "#/components/schemas/BaseTransactionState"
            - oneOf:
              - $ref: "#/components/schemas/OnRampTransactionState"
              - $ref: "#/components/schemas/OffRampTransactionState"
              - $ref: "#/components/schemas/TransferTransactionState"
        request: 
          type: object
          description: The parameters used when creating this transaction.
    BaseTransactionState: 
      type: object 
      properties:
        status:
          type: string
          description: The status of the transaction.
        transactionHash:
          type: string
          description: The identifier of this transaction on the blockchain.
          nullable: true
        blockExplorerUrl:
          type: string
          nullable: true
          description: The URL of the block explorer where the details of this transaction can be read.
    TransactionTimestamps:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          description: The timestamp from when the transaction was submitted.
        updatedAt:
          type: string
          format: date-time
          description: The timestamp from when the transaction was last updated.
    OnRampRequest:
      type: object 
      properties:
        sourceCurrency:
          enum: [BRL]
          description: The fiat currency to convert from.
        targetCurrency:
          enum: [USDC, USDT]
          description: The stablecoin to convert to.
        amount:
          example: '100.99'
          description: The amount to be converted from fiat to stablecoin.    
    OnRampResponse:
      type: object 
      properties:
        type: 
          enum: ['on-ramp']
        request: 
          description: An object containing the parameters used for this on-ramp.
          allOf:
            - $ref: "#/components/schemas/CrossRampRequest"
            - $ref: "#/components/schemas/OnRampRequest"
    OnRampTransactionState: 
      type: object 
      properties: 
        status:
          enum:
            - awaiting_funds
            - processing
            - success
            - failed
        payment: 
          type: object 
          description: The payment details to add funds for this on ramp transaction. 
          properties:
            rail:
              type: string 
              enum: ['pix']
              description: The payment rail that will be used for this transaction.
            brCode:
              type: string
              description: The PIX copy-and-paste code to be used for payment.
              example: "00020126580014br.gov.bcb.pix0136123e4567-e89b-12d3-a456-4266141740005204000053039865802BR5915Test Merchant6009Sao Paulo62070503***63041234"
    OffRampRequest:
      type: object 
      required: 
        - sourceCurrency
        - targetCurrency
        - amount
        - payment
      properties:
        sourceCurrency:
          enum: [USDC, USDT]
          description: The stablecoin to convert from.
        targetCurrency:
          enum: [BRL]
          description: The fiat currency to convert to.
        amount:
          example: '100.123456'
          description: The amount to be converted from stablecoin to fiat.
    OffRampResponse:
      type: object 
      properties:
        type: 
          enum: ['off-ramp']
        request: 
          description: An object containing the parameters used for this off-ramp.
          allOf:
            - $ref: "#/components/schemas/CrossRampRequest"
            - $ref: "#/components/schemas/OffRampRequest"
    OffRampTransactionState:
      type: object 
      properties:
        status: 
          enum: 
            - awaiting_signature
            - processing
            - success
            - failed
        encodedData: 
          type: string 
          description: The encoded data that needs to be signed in order to submit this transaction to the blockchain.
    TransferRequest:
      type: object
      required: 
        - currency
        - from 
        - to 
        - amount
      properties:
        currency:
          type: string
          enum: ['USDC','USDT']
          description: The stablecoin to be transferred.
        from:
          type: string
          format: uuid
          description: The id of the customer who is sending the tokens.
        to:
          type: string
          description: The wallet address or customer ID who will receive the tokens.
          examples:
            - "123e4567-e89b-12d3-a456-426614174000"
            - "0xa65aae78edef916d4102ba7b5672068c0d35fbff"
        amount:
          type: string
          format: number
          example: '100.123456'
          description: The amount to be transferred.
    TransferResponse:
      type: object
      properties:
        type:
          type: string
          description: The type of this transaction.
          enum: ['transfer']
        status: 
          enum: 
            - awaiting_signature
            - processing
            - success
            - failed
        request:
          description: An object containing the parameters used for this transfer.
          $ref: "#/components/schemas/TransferRequest"
    ExecuteTransactionRequest:
      type: object
      required: 
        - transactionSignatures
      properties:
        transactionSignatures:
          description: All signatures required for this transaction.
          type: array
          items: 
            type: string
  securitySchemes:
    apiKey:
      type: http
      scheme: bearer
      description: Bearer authentication header of the form `Bearer <API_KEY>`.